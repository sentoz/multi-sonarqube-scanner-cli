name: Docker Image CI

on:
  schedule:
    - cron: '30 14 * * *'
  push:
    tags: 
      - '*.**.**'
    paths-ignore:
      - '**.md'
      - '**.png'
      - '**.jpg'
      - '**.svg'
      - '**.yaml'
      - CNAME
      - LICENSE

jobs:
  build_base_images:
    name: Build base docker images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
      - name: Build and push Docker base focal
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-base-focal
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.base-focal
      - name: Build and push Docker base jammy
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-base
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.base

  build_standart_image:
    needs: [build_base_images]
    name: Build standart image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
      - name: Build and push Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile

  build_gradle_image:
    needs: [build_base_images]
    name: Build Gradle images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
      - name: Build and push Docker Gradle 7.3.3
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-gradle-8.1.1
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.gradle-7.3.3
      - name: Build and push Docker Gradle 8.1.1
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-gradle-8.1.1
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.gradle-8.1.1

  build_dotnet_image:
    needs: [build_base_images]
    name: Build .Net images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
      - name: Build and push Docker .Net-3.1
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-dotnet-3.1
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.dotnet-3.1
      - name: Build and push Docker .Net-5.0
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-dotnet-5.0
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.dotnet-5.0
      - name: Build and push Docker .Net-6.0
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-dotnet-6.0
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.dotnet-6.0
      - name: Build and push Docker .Net-7.0
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-dotnet-7.0
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.dotnet-7.0

  release:
    needs: [build_dotnet_image, build_gradle_image, build_gradle_image]
    name: Release
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Set env
        id: env
        run: |
          echo ::set-output name=PROJECT_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=PROJECT_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=PROJECT_TAG::${GITHUB_REF#refs/tags/}
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Standart image:

            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`

            Gradle images:

            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`

            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`

            .Net images:

            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull ghcr.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`

            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`
            * `docker pull docker.io/sentoz/:${{ steps.env.outputs.PROJECT_TAG }}`

          draft: false
          prerelease: false